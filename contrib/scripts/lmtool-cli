#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Runs against http://www.speech.cs.cmu.edu/tools/lmtool-new.html

import argparse
import os
import re
import requests
import requests.compat
import subprocess
import xml.etree.ElementTree as ET
import glob
import os
import sys

CMU_URL = 'http://www.speech.cs.cmu.edu/cgi-bin/tools/lmtool/run'

def get_project_root():
    """
    Gets /path/to/pocketsphinx-demo folder.

    Example:

     |2.4.2|  using virtualenv: pocketsphinx-demo   unifi in ~/dev/bossjones/pocketsphinx-demo
     ± |master U:2 ?:6 ✗| → python contrib/scripts/lmtool-cli
     PROJECT_ROOT
     /Users/malcolm/dev/bossjones/pocketsphinx-demo
    """
    scripts_dir = os.path.dirname(os.path.abspath(__file__))
    os_dir = os.path.join(scripts_dir, '..', os.path.pardir)
    return os.path.abspath(os_dir)

PROJECT_ROOT = get_project_root()

# def phrase_question(xml):
#     xml_root = ET.parse(xml).getroot()
#     name = xml_root.get('name')
#     questions = {}
#     for question in xml_root.findall('question'):
#         questions[question.find('q').text] = question.find('a').text
#     return questions, name


def main():
    print("PROJECT_ROOT")
    print(PROJECT_ROOT)
    # rospack = rospkg.RosPack()
    output_path = os.path.join(PROJECT_ROOT, 'speech', 'lang')
    default_corpus_path = os.path.join(PROJECT_ROOT, 'speech', 'corpus', 'demo-corpus.txt')
    default_lm_path = os.path.join(PROJECT_ROOT, 'speech', 'lang', 'lm', 'demo-langmodel.lm')
    default_dic_path = os.path.join(PROJECT_ROOT, 'speech', 'lang', 'dic', 'demo-dictonary.dic')
    parser = argparse.ArgumentParser(
        description='Download Sphinx language model form http://www.speech.cs.cmu.edu/tools/lmtool-new.html')
    parser.add_argument('-i', '--input', default=default_corpus_path, help="Default corpus txt file")
    parser.add_argument('-o', '--output', default=output_path, help="Output path")
    args = parser.parse_args()
    output_path = args.output

    # session = requests.session()
    # session.headers.update(
    #     {
    #         # Only accept JSON responses
    #         "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
    #         # Only accept UTF-8 encoded data
    #         # "Accept-Charset": "utf-8",
    #         # Always sending JSON
    #         "Content-Type": "text/plain",
    #         # "User-Agent": "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36",

    #         "Accept-Encoding": "gzip, deflate",
    #         "Accept-Language": "en-US,en;q=0.9"
    #     }
    # )

    # _uri = requests.compat.urlparse(CMU_URL)

    # url = CMU_URL

    host = 'http://www.speech.cs.cmu.edu'
    url = host + '/cgi-bin/tools/lmtool/run'
    # files = {'file': (default_corpus_path, open(default_corpus_path, 'rb'), 'multipart/form-data;')}

    with open(default_corpus_path, 'rb') as corpus:
        files = {'corpus': corpus}
        values = {'formtype': 'simple'}

        r = requests.post(url, files=files, data=values)
        response_text = r.text

    # PARSE RESPONSE TO GET URLS OF THE FILES WE NEED
    path_re = r'.*<title>Index of (.*?)</title>.*'
    number_re = r'.*TAR([0-9]*?)\.tgz.*'
    for line in response_text.split('\n'):
        # ERROR RESPONSE
        if "[_ERRO_]" in line:
            print("ERROR RESPONSE")
            return 1
        # IF WE FOUND THE DIRECTORY, KEEP IT AND DON'T BREAK
        if re.search(path_re, line):
            path = host + re.sub(path_re, r'\1', line)
        # IF WE FOUND THE NUMBER, KEEP IT AND BREAK
        elif re.search(number_re, line):
            number = re.sub(number_re, r'\1', line)
            break

    lm_url = path + '/' + number + '.lm'
    dic_url = path + '/' + number + '.dic'
    print("lm_url: {}".format(lm_url))
    print("dic_url: {}".format(dic_url))

    if default_lm_path is not None:
        _download_file(lm_url, default_lm_path)
    _download_file(dic_url, default_dic_path)

    print("done!")


def _download_file(url, path):
    print("Downloading ...{} to local path {}".format(url, path))
    r = requests.get(url, stream=True)
    if r.status_code == 200:
        with open(path, 'wb') as f:
            for chunk in r:
                f.write(chunk)

if __name__ == '__main__':
    main()
